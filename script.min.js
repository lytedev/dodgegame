sweg.useConsole = false;
sweg.width = 640;
sweg.height = 360;

enemies = false;
ob = false; 

maxSlomoTime = false;
slomoCooldown = false;
slomoTime = false;
usingSlomo = false;
slomoRatio = false;
survivedTime = false;

spawnChance = false;

cscreen = false;

startGame = function() {
	cscreen = "game"; 

	enemies = [];
	ob = new sweg.entity(); 
	ob.color = "#06f";
	ob.w = 16;
	ob.h = 16;
	ob.y = sweg.height - ob.h;
	ob.x = (sweg.width * Math.random()) - ob.w;

	maxSlomoTime = 2;
	slomoCooldown = false;
	slomoTime = maxSlomoTime;
	usingSlomo = false;
	slomoRatio = 4;
	survivedTime = 0;
	spawnChance = 0.01;
}; 

loseGame = function() {
	cscreen = "lost"; 

	ob = false;

	maxSlomoTime = 2;
	slomoCooldown = false;
	slomoTime = maxSlomoTime;
	usingSlomo = false;
	slomoRatio = 4;
	spawnChance = 0.40;
}; 

introGame = function() {
	cscreen = "intro"; 

	enemies = [];
	ob = new sweg.entity(); 
	ob.color = "#06f";
	ob.w = 16;
	ob.h = 16;
	ob.y = sweg.height - ob.h;
	ob.x = (sweg.width * Math.random()) - ob.w;

	maxSlomoTime = 2;
	slomoCooldown = false;
	slomoTime = maxSlomoTime;
	slomoRatio = 4;
	survivedTime = 0;
	usingSlomo = false;
	spawnChance = 0.40;
}; 

sweg.init = function() {
	sweg.graphics.addFont("small", "Segoe UI, Lucida Grande, Tahoma, sans-serif", 10);
	sweg.graphics.addFont("default", "Segoe UI, Lucida Grande, Tahoma, sans-serif", 12);
	sweg.graphics.addFont("large", "Georgia, Times New Roman, serif", 36);
	sweg.graphics.setFont("default");

	introGame();
}; 

sweg.update = function(dt) {
	ob.ay = 0;
	ob.ax = 0;
	ob.ay = 400;

	if (sweg.input.isPressed(sweg.input.keys.p)) { sweg.paused = !sweg.paused; }
	if (sweg.paused) { return; }

	if (cscreen == "lost") {
		if (sweg.input.isPressed(sweg.input.keys.k)) {
			var escore = document.getElementById("score-container");
			escore.value = survivedTime;
			var sform = document.getElementById("score-form");
			sform.submit();
		}
	}

	if (dt > 0.2) { dt = 0.2; }

	if (cscreen != "lost")
	{
		usingSlomo = false;
		if (sweg.input.isDown(sweg.input.keys.m) && !slomoCooldown) { 
			usingSlomo = true;
			if (cscreen == "game") { slomoTime -= dt; }
			dt /= slomoRatio; 
			if (slomoTime < 0) {
				slomoCooldown = true;
				slomoTime = 0;
			}
		} else {
			slomoTime += dt;
			if (slomoTime >= maxSlomoTime) {
				slomoTime = maxSlomoTime;
				slomoCooldown = false;
			}
		}
		survivedTime += dt * 100;
		spawnChance += dt / 1000;

		var speed = 8;
		if (sweg.input.isDown(sweg.input.keys.v)) { loseGame(); }
		if (sweg.input.isDown(sweg.input.keys.w)) { ob.ay -= speed * 100; }
		if (sweg.input.isDown(sweg.input.keys.s)) { ob.ay += speed * 100; }
		if (sweg.input.isDown(sweg.input.keys.a)) { ob.vx -= speed; }
		if (sweg.input.isDown(sweg.input.keys.d)) { ob.vx += speed; }
		if (ob) { ob.update(dt); }
		var bco = 2
		if (ob.x < 0) { ob.x = 0; ob.vx = -ob.vx / bco; }
		if (ob.y < 0) { ob.y = 0; ob.vy = -ob.vy / bco; }
		if (ob.x + ob.w > sweg.width) { ob.x = sweg.width - ob.w; ob.vx = -ob.vx / bco;}
		if (ob.y + ob.h > sweg.height) { ob.y = sweg.height - ob.h; ob.vy = -ob.vy / bco; }
	} 

	if (cscreen != "game") {
		if (sweg.input.isPressed(sweg.input.keys.l)) {
			startGame();
		}
	}

	for (var i = 0; i < enemies.length; i++) {
		enemies[i].update(dt);
		if (ob && cscreen == "game") {
			if (enemies[i].intersectsEntity(ob)) {
				loseGame();
			}
		}
		if (enemies[i].y > sweg.height) {
			enemies.splice(i, 1);
			if (cscreen == "game") { survivedTime += 200; }
			i--;
		}
	}
	while (Math.random() < spawnChance) {
		enemy = new sweg.entity();
		enemy.w = Math.floor((Math.random() * 42) + 3);
		enemy.h = Math.floor((Math.random() * 42) + 3);
		enemy.ay = 400;
		enemy.y = -enemy.h;
		enemy.x = (Math.random() * sweg.width) - enemy.w;
		enemy.color = "rgb(" + 
			Math.floor((Math.random() * 120) + 135) + "," + 
			Math.floor((Math.random() * 60) + 60) + "," + 
			Math.floor((Math.random() * 60) + 0)  + ")";
		enemies.push(enemy);
	}
};

sweg.draw = function(dt) { // dt = delta time in seconds

	if (!usingSlomo) {
		sweg.clearScreen();
	} else {
		var preimage = sweg.ctx.getImageData(0, 0, sweg.width, sweg.height);
		for (var i = 0; i < preimage.data.length; i++) { preimage.data[i] /= 1.20; }
		sweg.ctx.putImageData(preimage, 0, 0);
	}

	if (cscreen == "game") {
		for (var i = 0; i < enemies.length; i++) {
			enemies[i].draw(dt);
		}
		if (ob) { ob.draw(dt); }

		sweg.ctx.fillStyle = "#111";
		sweg.ctx.fillRect(8, 8, ((slomoTime / maxSlomoTime) * 100) + 4, 14);
		if (slomoCooldown) {
			sweg.ctx.fillStyle = "#f40";
		} else {
			sweg.ctx.fillStyle = ob.color;		
		}
		sweg.ctx.fillRect(10, 10, (slomoTime / maxSlomoTime) * 100, 10);
		sweg.ctx.fillStyle = "#fff";
		sweg.ctx.strokeStyle = "#000";
		sweg.graphics.setFont("default");

		sweg.ctx.textAlign = "left";
		sweg.graphics.drawStringWithOutline(Math.floor(survivedTime) + "", 120, 20, 3);
	} else if (cscreen == "lost") {
		for (var i = 0; i < enemies.length; i++) {
			enemies[i].draw(dt);
		}

		sweg.ctx.fillStyle = "#fff";
		sweg.ctx.strokeStyle = "#000";
		sweg.ctx.textAlign = "center";
		var y = 180;
		sweg.graphics.setFont("small");
		sweg.graphics.drawStringWithOutline("FINAL SCORE", sweg.width / 2, y - 35, 3);
		sweg.graphics.setFont("large");
		sweg.graphics.drawStringWithOutline(Math.floor(survivedTime)+"", sweg.width / 2, y, 5);
		sweg.graphics.setFont("default");
		sweg.graphics.drawStringWithOutline("Press 'L' to play again!", sweg.width / 2, y + 30, 3);
		sweg.graphics.drawStringWithOutline("Press 'K' to submit your score!", sweg.width / 2, y + 45, 3);
		sweg.graphics.drawStringWithOutline("Created at http://lytedev.com", sweg.width / 2, y + 75, 3);
	} else if (cscreen == "intro") {
		for (var i = 0; i < enemies.length; i++) {
			enemies[i].draw(dt);
		}
		if (ob) { ob.draw(dt); }

		sweg.ctx.fillStyle = "#fff";
		sweg.ctx.strokeStyle = "#000";
		sweg.graphics.setFont("large");
		sweg.ctx.textAlign = "center";
		var y = 140;
		sweg.graphics.drawStringWithOutline("Dodge", sweg.width / 2, y, 5);
		sweg.graphics.setFont("default");
		sweg.graphics.drawStringWithOutline("Move with W,A,S,D", sweg.width / 2, y + 30, 3);
		sweg.graphics.drawStringWithOutline("Slo-mo with M", sweg.width / 2, y + 45, 3);
		sweg.graphics.drawStringWithOutline("Pause with P", sweg.width / 2, y + 60, 3);
		sweg.graphics.drawStringWithOutline("Don't touch the falling boxes!", sweg.width / 2, y + 75, 3);
		sweg.graphics.drawStringWithOutline("Press L to start!", sweg.width / 2, y + 105, 3);
		sweg.graphics.drawStringWithOutline("Created at http://lytedev.com", sweg.width / 2, y + 135, 3);
	}

	if (sweg.paused) {
		sweg.ctx.fillStyle = "#fff";
		sweg.ctx.strokeStyle = "#000";
		sweg.ctx.textAlign = "left";
		sweg.graphics.setFont("small");
		sweg.graphics.drawStringWithOutline("PAUSED", 10, 30, 3);
	}
	
	/*
	sweg.graphics.drawString(sweg.fps + "", 10, sweg.height - 10);
	sweg.graphics.drawString(enemies.length + "", 10, sweg.height - 25);
	*/
}; 

sweg.prepare();
sweg.print("Prepared");